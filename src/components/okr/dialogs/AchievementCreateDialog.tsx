
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';

const achievementIcons = [
  { value: 'üèÜ', label: 'C√∫p v√†ng', category: 'trophy' },
  { value: 'ü•á', label: 'Huy ch∆∞∆°ng v√†ng', category: 'medal' },
  { value: 'ü•à', label: 'Huy ch∆∞∆°ng b·∫°c', category: 'medal' },
  { value: 'ü•â', label: 'Huy ch∆∞∆°ng ƒë·ªìng', category: 'medal' },
  { value: 'üëë', label: 'V∆∞∆°ng mi·ªán', category: 'crown' },
  { value: '‚≠ê', label: 'Ng√¥i sao', category: 'star' },
  { value: 'üåü', label: 'Ng√¥i sao s√°ng', category: 'star' },
  { value: 'üíé', label: 'Kim c∆∞∆°ng', category: 'gem' },
  { value: 'üî•', label: 'L·ª≠a ƒëam m√™', category: 'element' },
  { value: '‚ö°', label: 'T·ªëc ƒë·ªô', category: 'element' },
  { value: 'üéØ', label: 'M·ª•c ti√™u', category: 'target' },
  { value: 'üöÄ', label: 'T√™n l·ª≠a', category: 'speed' },
  { value: 'ü¶Ö', label: 'ƒê·∫°i b√†ng', category: 'animal' },
  { value: 'ü¶Å', label: 'S∆∞ t·ª≠', category: 'animal' },
  { value: 'üî±', label: 'Tam thoa', category: 'weapon' },
  { value: '‚öîÔ∏è', label: 'Thanh ki·∫øm', category: 'weapon' },
  { value: 'üõ°Ô∏è', label: 'Khi√™n', category: 'shield' },
  { value: 'üèÖ', label: 'Huy hi·ªáu', category: 'badge' },
  { value: 'üéñÔ∏è', label: 'Hu√¢n ch∆∞∆°ng', category: 'medal' },
  { value: 'üè∞', label: 'L√¢u ƒë√†i', category: 'building' }
];

const achievementTypes = [
  { value: 'milestone', label: 'C·ªôt m·ªëc', color: 'bg-blue-100 text-blue-800' },
  { value: 'achievement', label: 'Th√†nh t√≠ch', color: 'bg-green-100 text-green-800' },
  { value: 'collaboration', label: 'C·ªông t√°c', color: 'bg-purple-100 text-purple-800' },
  { value: 'excellence', label: 'Xu·∫•t s·∫Øc', color: 'bg-yellow-100 text-yellow-800' },
  { value: 'leadership', label: 'L√£nh ƒë·∫°o', color: 'bg-red-100 text-red-800' },
  { value: 'innovation', label: 'S√°ng t·∫°o', color: 'bg-orange-100 text-orange-800' }
];

interface Achievement {
  id: number;
  name: string;
  description: string;
  icon: string;
  type: string;
  points: number;
  status: string;
}

interface AchievementCreateDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  achievement?: Achievement | null;
  onSave: (achievement: Omit<Achievement, 'id'>) => void;
}

export function AchievementCreateDialog({ open, onOpenChange, achievement, onSave }: AchievementCreateDialogProps) {
  const { toast } = useToast();
  const [formData, setFormData] = useState({
    name: achievement?.name || '',
    description: achievement?.description || '',
    icon: achievement?.icon || 'üèÜ',
    type: achievement?.type || 'milestone',
    points: achievement?.points || 100,
    status: achievement?.status || 'active'
  });

  const [selectedCategory, setSelectedCategory] = useState('trophy');

  const filteredIcons = achievementIcons.filter(icon => 
    selectedCategory === 'all' || icon.category === selectedCategory
  );

  const handleSave = () => {
    if (!formData.name || !formData.description) {
      toast({
        title: "Thi·∫øu th√¥ng tin",
        description: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t√™n v√† m√¥ t·∫£ huy hi·ªáu",
        variant: "destructive",
      });
      return;
    }

    onSave(formData);
    toast({
      title: "ƒê√£ t·∫°o th√†nh c√¥ng",
      description: "Huy hi·ªáu m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o",
    });
    onOpenChange(false);
  };

  const getTypeColor = (type: string) => {
    return achievementTypes.find(t => t.value === type)?.color || 'bg-gray-100 text-gray-800';
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {achievement ? 'Ch·ªânh s·ª≠a huy hi·ªáu' : 'T·∫°o huy hi·ªáu m·ªõi'}
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-6 py-4">
          {/* Preview */}
          <div className="flex items-center justify-center p-6 bg-gradient-to-br from-yellow-50 to-orange-50 rounded-lg border-2 border-dashed border-yellow-200">
            <div className="text-center">
              <div className="text-6xl mb-3">{formData.icon}</div>
              <h3 className="font-bold text-lg text-gray-900 mb-1">
                {formData.name || 'T√™n huy hi·ªáu'}
              </h3>
              <p className="text-gray-600 text-sm mb-2">
                {formData.description || 'M√¥ t·∫£ huy hi·ªáu'}
              </p>
              <div className="flex items-center justify-center gap-2">
                <Badge className={getTypeColor(formData.type)}>
                  {achievementTypes.find(t => t.value === formData.type)?.label}
                </Badge>
                <Badge variant="outline">
                  {formData.points} ƒëi·ªÉm
                </Badge>
              </div>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Form Fields */}
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>T√™n huy hi·ªáu</Label>
                <Input
                  value={formData.name}
                  onChange={(e) => setFormData({...formData, name: e.target.value})}
                  placeholder="VD: Chinh ph·ª•c ƒë·ªânh cao"
                />
              </div>

              <div className="space-y-2">
                <Label>M√¥ t·∫£</Label>
                <Textarea
                  value={formData.description}
                  onChange={(e) => setFormData({...formData, description: e.target.value})}
                  placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ huy hi·ªáu v√† c√°ch ƒë·∫°t ƒë∆∞·ª£c..."
                  rows={3}
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label>Lo·∫°i huy hi·ªáu</Label>
                  <Select value={formData.type} onValueChange={(value) => setFormData({...formData, type: value})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {achievementTypes.map((type) => (
                        <SelectItem key={type.value} value={type.value}>
                          {type.label}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label>ƒêi·ªÉm th∆∞·ªüng</Label>
                  <Input
                    type="number"
                    value={formData.points}
                    onChange={(e) => setFormData({...formData, points: parseInt(e.target.value) || 0})}
                    min="0"
                    step="10"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label>Tr·∫°ng th√°i</Label>
                <Select value={formData.status} onValueChange={(value) => setFormData({...formData, status: value})}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="active">Ho·∫°t ƒë·ªông</SelectItem>
                    <SelectItem value="draft">Nh√°p</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {/* Icon Selection */}
            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Ch·ªçn bi·ªÉu t∆∞·ª£ng</Label>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="trophy">C√∫p & Gi·∫£i th∆∞·ªüng</SelectItem>
                    <SelectItem value="medal">Huy ch∆∞∆°ng</SelectItem>
                    <SelectItem value="crown">V∆∞∆°ng mi·ªán</SelectItem>
                    <SelectItem value="star">Ng√¥i sao</SelectItem>
                    <SelectItem value="gem">ƒê√° qu√Ω</SelectItem>
                    <SelectItem value="element">Nguy√™n t·ªë</SelectItem>
                    <SelectItem value="target">M·ª•c ti√™u</SelectItem>
                    <SelectItem value="speed">T·ªëc ƒë·ªô</SelectItem>
                    <SelectItem value="animal">ƒê·ªông v·∫≠t</SelectItem>
                    <SelectItem value="weapon">V≈© kh√≠</SelectItem>
                    <SelectItem value="shield">Khi√™n</SelectItem>
                    <SelectItem value="badge">Huy hi·ªáu</SelectItem>
                    <SelectItem value="building">Ki·∫øn tr√∫c</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="grid grid-cols-5 gap-2 max-h-48 overflow-y-auto p-2 border rounded-lg">
                {filteredIcons.map((icon) => (
                  <button
                    key={icon.value}
                    type="button"
                    onClick={() => setFormData({...formData, icon: icon.value})}
                    className={`p-3 text-2xl rounded-lg border-2 transition-all hover:scale-110 ${
                      formData.icon === icon.value 
                        ? 'border-blue-500 bg-blue-50' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    title={icon.label}
                  >
                    {icon.value}
                  </button>
                ))}
              </div>
            </div>
          </div>
        </div>

        <div className="flex justify-end gap-3">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            H·ªßy
          </Button>
          <Button onClick={handleSave} className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700">
            {achievement ? 'L∆∞u thay ƒë·ªïi' : 'T·∫°o huy hi·ªáu'}
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
